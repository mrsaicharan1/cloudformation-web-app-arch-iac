# 1 VPC
# 3 public subnets
# 3 WebTier subnets
# 3 middleware subnets
# 3 database subnets
# 1 internet gateway
# 1 NAT gateway
# 1 public route table
# 1 private route table
# 2 IAM roles (for administrators and developers)

AWSTemplateFormatVersion: 2010-09-09

Description: This is my first bucket

Parameters:
  VpcCidr:
    type: String
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}
  PublicSubnetCidr1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  PublicSubnetCidr2:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  PublicSubnetCidr3:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  DatabaseSubnetCidr1:
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  DatabaseSubnetCidr2:

    Type: String

    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  DatabaseSubnetCidr3:

    Type: String

    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  Environment:

    Type: String

    AllowedValues: ['prod', 'test']
  
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [!Ref Environment, 'vpc' ]]  
        - Key: 'Env'
          Value: !Ref Environment


  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'public-subnet01' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'public-subnet02' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'public-subnet03' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  WebTierSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'webtier-subnet01' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  WebTierSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 4, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'webtier-subnet02' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  WebTierSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 5, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'webtier-subnet03' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  MiddlewareSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 6, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'middleware-subnet01' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  MiddlewareSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 7, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'middleware-subnet02' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  MiddlewareSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 8, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'middleware-subnet03' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 9, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'database-subnet01' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 10, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'database-subnet02' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 11, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref Vpc
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'database-subnet03' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

#IGW and VPC attach
  Igw:
    Type: "AWS::EC2::InternetGateway"

  IgwToVpcAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc
#NAT

  NatEip:
    Type: "AWS::EC2:EIP"

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      Subnet: !Ref PublicSubnet1


#Public Route Table & Route
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc

  PublicRoute:
    DependsOn: IgwToVpcAttachment
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

#Private Route Table & Route
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref Vpc

  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGw
#Subnet RT assoc.(12)
PubSubRtAttachment1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PubSubRtAttachment2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PubSubRtAttachment3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  WebSubRtAttachment1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref WebTierSubnet1

  WebSubRtAttachment2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref WebTierSubnet2

  WebSubRtAttachment3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref WebTierSubnet3

  MiddlewareSubRtAttachment1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MiddlewareSubnet1

  MiddlewareSubRtAttachment2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MiddlewareSubnet2

  MiddlewareSubRtAttachment3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref MiddlewareSubnet3

  DbSubRtAttachment1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DbSubRtAttachment2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DatabaseSubnet2

  DbSubRtAttachment3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DatabaseSubnet3

#DB Subnet Group
  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
        - !Ref DatabaseSubnet3
#IAM Roles

  AdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  Effect: Allow
             Action:
               - sts:AssumeRole
             Principal:
               AWS: !Join [":", [ "arn:aws:iam:", !Ref "AWS::AccountId", "user/Admin" ] ]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'admin-role' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

  DevRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
                - "sts:AssumeRole"
            Principal:
              AWS: !Ref "AWS::AccountId"
      ManagedPolicyArns:
        - !If [ ProdEnv, "arn:aws:iam::aws:policy/ReadOnlyAccess", "arn:aws:iam::aws:policy/AdministratorAccess"]
      Tags:
        - Key: 'Name'
          Value: !Join ['-', [ !Ref 'Environment', 'dev-role' ]]
        - Key: 'Env'
          Value: !Ref 'Environment'

# Desired ASG size params

  WebTierAsgDesSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"

    WebTierAsgMinSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"

    WebTierAsgMaxSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"

    MiddlewareAsgDesSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"

    MiddlewareAsgMinSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"

    MiddlewareAsgMaxSizeParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Type: String
        Value: "1"


Outputs:

  VpcId:
    Value: !Ref Vpc
    Export:
      Name: VpcId

  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1Id

  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2Id

  PublicSubnet3Id:
    Value: !Ref PublicSubnet3
    Export:
      Name: PublicSubnet3Id

  WebTierSubnet1Id:
    Value: !Ref WebTierSubnet1
    Export:
      Name: WebTierSubnet1Id

  WebTierSubnet2Id:
    Value: !Ref WebTierSubnet2
    Export:
      Name: WebTierSubnet2Id

  WebTierSubnet3Id:
    Value: !Ref WebTierSubnet3
    Export:
      Name: WebTierSubnet3Id

  MiddlewareSubnet1Id:
    Value: !Ref MiddlewareSubnet1
    Export:
      Name: MiddlewareSubnet1Id

  MiddlewareSubnet2Id:
    Value: !Ref MiddlewareSubnet2
    Export:
      Name: MiddlewareSubnet2Id

  MiddlewareSubnet3Id:
    Value: !Ref MiddlewareSubnet3
    Export:
      Name: MiddlewareSubnet3Id

  DbSubnetGroupId:
    Value: !Ref DbSubnetGroup
    Export:
      Name: DbSubnetGroupId

  WebTierDesSizeParameter:
    Value: !Ref WebTierAsgDesSizeParameter
    Export:
      Name: WebTierDesSizeParameter

  WebTierMinSizeParameter:
    Value: !Ref WebTierAsgMinSizeParameter
    Export:
      Name: WebTierMinSizeParameter

  WebTierMaxSizeParameter:
    Value: !Ref WebTierAsgMaxSizeParameter
    Export:
      Name: WebTierMaxSizeParameter

  MiddlewareDesSizeParameter:
    Value: !Ref MiddlewareAsgDesSizeParameter
    Export:
      Name: MiddlewareDesSizeParameter

  MiddlewareMinSizeParameter:
    Value: !Ref MiddlewareAsgMinSizeParameter
    Export:
      Name: MiddlewareMinSizeParameter

  MiddlewarerMaxSizeParameter:
    Value: !Ref MiddlewareAsgMaxSizeParameter
    Export:
      Name: MiddlewareMaxSizeParameter



